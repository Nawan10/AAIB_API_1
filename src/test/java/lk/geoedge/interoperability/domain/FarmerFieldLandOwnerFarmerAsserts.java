package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FarmerFieldLandOwnerFarmerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerFarmerAllPropertiesEquals(
        FarmerFieldLandOwnerFarmer expected,
        FarmerFieldLandOwnerFarmer actual
    ) {
        assertFarmerFieldLandOwnerFarmerAutoGeneratedPropertiesEquals(expected, actual);
        assertFarmerFieldLandOwnerFarmerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerFarmerAllUpdatablePropertiesEquals(
        FarmerFieldLandOwnerFarmer expected,
        FarmerFieldLandOwnerFarmer actual
    ) {
        assertFarmerFieldLandOwnerFarmerUpdatableFieldsEquals(expected, actual);
        assertFarmerFieldLandOwnerFarmerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerFarmerAutoGeneratedPropertiesEquals(
        FarmerFieldLandOwnerFarmer expected,
        FarmerFieldLandOwnerFarmer actual
    ) {
        assertThat(actual)
            .as("Verify FarmerFieldLandOwnerFarmer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerFarmerUpdatableFieldsEquals(
        FarmerFieldLandOwnerFarmer expected,
        FarmerFieldLandOwnerFarmer actual
    ) {
        assertThat(actual)
            .as("Verify FarmerFieldLandOwnerFarmer relevant properties")
            .satisfies(a -> assertThat(a.getFarmerId()).as("check farmerId").isEqualTo(expected.getFarmerId()))
            .satisfies(a -> assertThat(a.getFarmerName()).as("check farmerName").isEqualTo(expected.getFarmerName()))
            .satisfies(a -> assertThat(a.getNicNo()).as("check nicNo").isEqualTo(expected.getNicNo()))
            .satisfies(a -> assertThat(a.getAddressFirstLine()).as("check addressFirstLine").isEqualTo(expected.getAddressFirstLine()))
            .satisfies(a -> assertThat(a.getContactNoEmail()).as("check contactNoEmail").isEqualTo(expected.getContactNoEmail()))
            .satisfies(a -> assertThat(a.getProvinceId()).as("check provinceId").isEqualTo(expected.getProvinceId()))
            .satisfies(a -> assertThat(a.getDistrictId()).as("check districtId").isEqualTo(expected.getDistrictId()))
            .satisfies(a -> assertThat(a.getDsId()).as("check dsId").isEqualTo(expected.getDsId()))
            .satisfies(a -> assertThat(a.getGnId()).as("check gnId").isEqualTo(expected.getGnId()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getAddedDate()).as("check addedDate").isEqualTo(expected.getAddedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerFarmerUpdatableRelationshipsEquals(
        FarmerFieldLandOwnerFarmer expected,
        FarmerFieldLandOwnerFarmer actual
    ) {
        // empty method
    }
}
