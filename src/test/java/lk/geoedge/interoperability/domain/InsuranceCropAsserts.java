package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InsuranceCropAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCropAllPropertiesEquals(InsuranceCrop expected, InsuranceCrop actual) {
        assertInsuranceCropAutoGeneratedPropertiesEquals(expected, actual);
        assertInsuranceCropAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCropAllUpdatablePropertiesEquals(InsuranceCrop expected, InsuranceCrop actual) {
        assertInsuranceCropUpdatableFieldsEquals(expected, actual);
        assertInsuranceCropUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCropAutoGeneratedPropertiesEquals(InsuranceCrop expected, InsuranceCrop actual) {
        assertThat(actual)
            .as("Verify InsuranceCrop auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCropUpdatableFieldsEquals(InsuranceCrop expected, InsuranceCrop actual) {
        assertThat(actual)
            .as("Verify InsuranceCrop relevant properties")
            .satisfies(a -> assertThat(a.getPolicyId()).as("check policyId").isEqualTo(expected.getPolicyId()))
            .satisfies(a -> assertThat(a.getYield()).as("check yield").isEqualTo(expected.getYield()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCropUpdatableRelationshipsEquals(InsuranceCrop expected, InsuranceCrop actual) {
        assertThat(actual)
            .as("Verify InsuranceCrop relationships")
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
