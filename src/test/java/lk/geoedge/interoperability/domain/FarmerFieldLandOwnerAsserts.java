package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FarmerFieldLandOwnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerAllPropertiesEquals(FarmerFieldLandOwner expected, FarmerFieldLandOwner actual) {
        assertFarmerFieldLandOwnerAutoGeneratedPropertiesEquals(expected, actual);
        assertFarmerFieldLandOwnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerAllUpdatablePropertiesEquals(FarmerFieldLandOwner expected, FarmerFieldLandOwner actual) {
        assertFarmerFieldLandOwnerUpdatableFieldsEquals(expected, actual);
        assertFarmerFieldLandOwnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerAutoGeneratedPropertiesEquals(FarmerFieldLandOwner expected, FarmerFieldLandOwner actual) {
        assertThat(actual)
            .as("Verify FarmerFieldLandOwner auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerUpdatableFieldsEquals(FarmerFieldLandOwner expected, FarmerFieldLandOwner actual) {
        assertThat(actual)
            .as("Verify FarmerFieldLandOwner relevant properties")
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldLandOwnerUpdatableRelationshipsEquals(FarmerFieldLandOwner expected, FarmerFieldLandOwner actual) {
        assertThat(actual)
            .as("Verify FarmerFieldLandOwner relationships")
            .satisfies(a -> assertThat(a.getFarmerFieldOwner()).as("check farmerFieldOwner").isEqualTo(expected.getFarmerFieldOwner()))
            .satisfies(a -> assertThat(a.getFarmer()).as("check farmer").isEqualTo(expected.getFarmer()));
    }
}
