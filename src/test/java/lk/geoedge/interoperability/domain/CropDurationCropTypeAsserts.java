package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CropDurationCropTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCropDurationCropTypeAllPropertiesEquals(CropDurationCropType expected, CropDurationCropType actual) {
        assertCropDurationCropTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertCropDurationCropTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCropDurationCropTypeAllUpdatablePropertiesEquals(CropDurationCropType expected, CropDurationCropType actual) {
        assertCropDurationCropTypeUpdatableFieldsEquals(expected, actual);
        assertCropDurationCropTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCropDurationCropTypeAutoGeneratedPropertiesEquals(CropDurationCropType expected, CropDurationCropType actual) {
        assertThat(actual)
            .as("Verify CropDurationCropType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCropDurationCropTypeUpdatableFieldsEquals(CropDurationCropType expected, CropDurationCropType actual) {
        assertThat(actual)
            .as("Verify CropDurationCropType relevant properties")
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getMainCrop()).as("check mainCrop").isEqualTo(expected.getMainCrop()))
            .satisfies(a -> assertThat(a.getCropCode()).as("check cropCode").isEqualTo(expected.getCropCode()))
            .satisfies(a -> assertThat(a.getNoOfStages()).as("check noOfStages").isEqualTo(expected.getNoOfStages()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCropTypesId()).as("check cropTypesId").isEqualTo(expected.getCropTypesId()))
            .satisfies(a -> assertThat(a.getUnitsId()).as("check unitsId").isEqualTo(expected.getUnitsId()))
            .satisfies(a -> assertThat(a.getArea()).as("check area").isEqualTo(expected.getArea()))
            .satisfies(a -> assertThat(a.getSumInsured()).as("check sumInsured").isEqualTo(expected.getSumInsured()))
            .satisfies(a -> assertThat(a.getMinSumInsured()).as("check minSumInsured").isEqualTo(expected.getMinSumInsured()))
            .satisfies(a -> assertThat(a.getMaxSumInsured()).as("check maxSumInsured").isEqualTo(expected.getMaxSumInsured()))
            .satisfies(a ->
                assertThat(a.getSubsidisedPremiumRate()).as("check subsidisedPremiumRate").isEqualTo(expected.getSubsidisedPremiumRate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCropDurationCropTypeUpdatableRelationshipsEquals(CropDurationCropType expected, CropDurationCropType actual) {
        // empty method
    }
}
