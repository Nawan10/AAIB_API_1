package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CultivatedLandDamageReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReportAllPropertiesEquals(
        CultivatedLandDamageReport expected,
        CultivatedLandDamageReport actual
    ) {
        assertCultivatedLandDamageReportAutoGeneratedPropertiesEquals(expected, actual);
        assertCultivatedLandDamageReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReportAllUpdatablePropertiesEquals(
        CultivatedLandDamageReport expected,
        CultivatedLandDamageReport actual
    ) {
        assertCultivatedLandDamageReportUpdatableFieldsEquals(expected, actual);
        assertCultivatedLandDamageReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReportAutoGeneratedPropertiesEquals(
        CultivatedLandDamageReport expected,
        CultivatedLandDamageReport actual
    ) {
        assertThat(actual)
            .as("Verify CultivatedLandDamageReport auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReportUpdatableFieldsEquals(
        CultivatedLandDamageReport expected,
        CultivatedLandDamageReport actual
    ) {
        assertThat(actual)
            .as("Verify CultivatedLandDamageReport relevant properties")
            .satisfies(a -> assertThat(a.getDamageReasonId()).as("check damageReasonId").isEqualTo(expected.getDamageReasonId()))
            .satisfies(a -> assertThat(a.getDamageServerityId()).as("check damageServerityId").isEqualTo(expected.getDamageServerityId()))
            .satisfies(a -> assertThat(a.getDamageDateMonitor()).as("check damageDateMonitor").isEqualTo(expected.getDamageDateMonitor()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getFarmerComment()).as("check farmerComment").isEqualTo(expected.getFarmerComment()))
            .satisfies(a -> assertThat(a.getEstimatedYield()).as("check estimatedYield").isEqualTo(expected.getEstimatedYield()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReportUpdatableRelationshipsEquals(
        CultivatedLandDamageReport expected,
        CultivatedLandDamageReport actual
    ) {
        assertThat(actual)
            .as("Verify CultivatedLandDamageReport relationships")
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()))
            .satisfies(a -> assertThat(a.getDamageCategory()).as("check damageCategory").isEqualTo(expected.getDamageCategory()))
            .satisfies(a -> assertThat(a.getDamageType()).as("check damageType").isEqualTo(expected.getDamageType()));
    }
}
