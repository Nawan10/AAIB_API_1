package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InsuranceCultivatedLandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandAllPropertiesEquals(InsuranceCultivatedLand expected, InsuranceCultivatedLand actual) {
        assertInsuranceCultivatedLandAutoGeneratedPropertiesEquals(expected, actual);
        assertInsuranceCultivatedLandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandAllUpdatablePropertiesEquals(
        InsuranceCultivatedLand expected,
        InsuranceCultivatedLand actual
    ) {
        assertInsuranceCultivatedLandUpdatableFieldsEquals(expected, actual);
        assertInsuranceCultivatedLandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandAutoGeneratedPropertiesEquals(
        InsuranceCultivatedLand expected,
        InsuranceCultivatedLand actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLand auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandUpdatableFieldsEquals(
        InsuranceCultivatedLand expected,
        InsuranceCultivatedLand actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLand relevant properties")
            .satisfies(a -> assertThat(a.getCropDurationId()).as("check cropDurationId").isEqualTo(expected.getCropDurationId()))
            .satisfies(a -> assertThat(a.getInsurancePoliceId()).as("check insurancePoliceId").isEqualTo(expected.getInsurancePoliceId()))
            .satisfies(a -> assertThat(a.getSumInsuredPerAcre()).as("check sumInsuredPerAcre").isEqualTo(expected.getSumInsuredPerAcre()))
            .satisfies(a -> assertThat(a.getInsuranceExtent()).as("check insuranceExtent").isEqualTo(expected.getInsuranceExtent()))
            .satisfies(a -> assertThat(a.getSumAmount()).as("check sumAmount").isEqualTo(expected.getSumAmount()))
            .satisfies(a -> assertThat(a.getInsuranceStatus()).as("check insuranceStatus").isEqualTo(expected.getInsuranceStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandUpdatableRelationshipsEquals(
        InsuranceCultivatedLand expected,
        InsuranceCultivatedLand actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLand relationships")
            .satisfies(a -> assertThat(a.getFarmer()).as("check farmer").isEqualTo(expected.getFarmer()))
            .satisfies(a -> assertThat(a.getCultivatedLand()).as("check cultivatedLand").isEqualTo(expected.getCultivatedLand()))
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
