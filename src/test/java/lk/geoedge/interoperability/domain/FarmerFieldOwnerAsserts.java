package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FarmerFieldOwnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldOwnerAllPropertiesEquals(FarmerFieldOwner expected, FarmerFieldOwner actual) {
        assertFarmerFieldOwnerAutoGeneratedPropertiesEquals(expected, actual);
        assertFarmerFieldOwnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldOwnerAllUpdatablePropertiesEquals(FarmerFieldOwner expected, FarmerFieldOwner actual) {
        assertFarmerFieldOwnerUpdatableFieldsEquals(expected, actual);
        assertFarmerFieldOwnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldOwnerAutoGeneratedPropertiesEquals(FarmerFieldOwner expected, FarmerFieldOwner actual) {
        assertThat(actual)
            .as("Verify FarmerFieldOwner auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldOwnerUpdatableFieldsEquals(FarmerFieldOwner expected, FarmerFieldOwner actual) {
        assertThat(actual)
            .as("Verify FarmerFieldOwner relevant properties")
            .satisfies(a -> assertThat(a.getLandPlotName()).as("check landPlotName").isEqualTo(expected.getLandPlotName()))
            .satisfies(a -> assertThat(a.getLandRegistryNo()).as("check landRegistryNo").isEqualTo(expected.getLandRegistryNo()))
            .satisfies(a -> assertThat(a.getTotalLandExtent()).as("check totalLandExtent").isEqualTo(expected.getTotalLandExtent()))
            .satisfies(a -> assertThat(a.getCalculatedArea()).as("check calculatedArea").isEqualTo(expected.getCalculatedArea()))
            .satisfies(a -> assertThat(a.getProvinceId()).as("check provinceId").isEqualTo(expected.getProvinceId()))
            .satisfies(a -> assertThat(a.getDistrictId()).as("check districtId").isEqualTo(expected.getDistrictId()))
            .satisfies(a -> assertThat(a.getDsId()).as("check dsId").isEqualTo(expected.getDsId()))
            .satisfies(a -> assertThat(a.getGnId()).as("check gnId").isEqualTo(expected.getGnId()))
            .satisfies(a -> assertThat(a.getCenterLat()).as("check centerLat").isEqualTo(expected.getCenterLat()))
            .satisfies(a -> assertThat(a.getCenterLng()).as("check centerLng").isEqualTo(expected.getCenterLng()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFarmerFieldOwnerUpdatableRelationshipsEquals(FarmerFieldOwner expected, FarmerFieldOwner actual) {
        assertThat(actual)
            .as("Verify FarmerFieldOwner relationships")
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
