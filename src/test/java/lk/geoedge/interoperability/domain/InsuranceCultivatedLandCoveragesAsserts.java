package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InsuranceCultivatedLandCoveragesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesAllPropertiesEquals(
        InsuranceCultivatedLandCoverages expected,
        InsuranceCultivatedLandCoverages actual
    ) {
        assertInsuranceCultivatedLandCoveragesAutoGeneratedPropertiesEquals(expected, actual);
        assertInsuranceCultivatedLandCoveragesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesAllUpdatablePropertiesEquals(
        InsuranceCultivatedLandCoverages expected,
        InsuranceCultivatedLandCoverages actual
    ) {
        assertInsuranceCultivatedLandCoveragesUpdatableFieldsEquals(expected, actual);
        assertInsuranceCultivatedLandCoveragesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesAutoGeneratedPropertiesEquals(
        InsuranceCultivatedLandCoverages expected,
        InsuranceCultivatedLandCoverages actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLandCoverages auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesUpdatableFieldsEquals(
        InsuranceCultivatedLandCoverages expected,
        InsuranceCultivatedLandCoverages actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLandCoverages relevant properties")
            .satisfies(a -> assertThat(a.getConverageAmount()).as("check converageAmount").isEqualTo(expected.getConverageAmount()))
            .satisfies(a -> assertThat(a.getIsSelect()).as("check isSelect").isEqualTo(expected.getIsSelect()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesUpdatableRelationshipsEquals(
        InsuranceCultivatedLandCoverages expected,
        InsuranceCultivatedLandCoverages actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLandCoverages relationships")
            .satisfies(a ->
                assertThat(a.getInsuranceCultivatedLand())
                    .as("check insuranceCultivatedLand")
                    .isEqualTo(expected.getInsuranceCultivatedLand())
            )
            .satisfies(a -> assertThat(a.getIndexCoverage()).as("check indexCoverage").isEqualTo(expected.getIndexCoverage()));
    }
}
