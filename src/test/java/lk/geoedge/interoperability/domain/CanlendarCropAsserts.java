package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CanlendarCropAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCanlendarCropAllPropertiesEquals(CanlendarCrop expected, CanlendarCrop actual) {
        assertCanlendarCropAutoGeneratedPropertiesEquals(expected, actual);
        assertCanlendarCropAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCanlendarCropAllUpdatablePropertiesEquals(CanlendarCrop expected, CanlendarCrop actual) {
        assertCanlendarCropUpdatableFieldsEquals(expected, actual);
        assertCanlendarCropUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCanlendarCropAutoGeneratedPropertiesEquals(CanlendarCrop expected, CanlendarCrop actual) {
        assertThat(actual)
            .as("Verify CanlendarCrop auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCanlendarCropUpdatableFieldsEquals(CanlendarCrop expected, CanlendarCrop actual) {
        assertThat(actual)
            .as("Verify CanlendarCrop relevant properties")
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getPercentage()).as("check percentage").isEqualTo(expected.getPercentage()))
            .satisfies(a ->
                assertThat(a.getCanlendarCropStatus()).as("check canlendarCropStatus").isEqualTo(expected.getCanlendarCropStatus())
            )
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCanlendarCropUpdatableRelationshipsEquals(CanlendarCrop expected, CanlendarCrop actual) {
        assertThat(actual)
            .as("Verify CanlendarCrop relationships")
            .satisfies(a -> assertThat(a.getSeason()).as("check season").isEqualTo(expected.getSeason()))
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
