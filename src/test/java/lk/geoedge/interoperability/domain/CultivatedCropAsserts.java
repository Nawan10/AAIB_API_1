package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CultivatedCropAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedCropAllPropertiesEquals(CultivatedCrop expected, CultivatedCrop actual) {
        assertCultivatedCropAutoGeneratedPropertiesEquals(expected, actual);
        assertCultivatedCropAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedCropAllUpdatablePropertiesEquals(CultivatedCrop expected, CultivatedCrop actual) {
        assertCultivatedCropUpdatableFieldsEquals(expected, actual);
        assertCultivatedCropUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedCropAutoGeneratedPropertiesEquals(CultivatedCrop expected, CultivatedCrop actual) {
        assertThat(actual)
            .as("Verify CultivatedCrop auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedCropUpdatableFieldsEquals(CultivatedCrop expected, CultivatedCrop actual) {
        assertThat(actual)
            .as("Verify CultivatedCrop relevant properties")
            .satisfies(a -> assertThat(a.getCultivatedExtend()).as("check cultivatedExtend").isEqualTo(expected.getCultivatedExtend()))
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getYield()).as("check yield").isEqualTo(expected.getYield()))
            .satisfies(a -> assertThat(a.getUnitId()).as("check unitId").isEqualTo(expected.getUnitId()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedCropUpdatableRelationshipsEquals(CultivatedCrop expected, CultivatedCrop actual) {
        assertThat(actual)
            .as("Verify CultivatedCrop relationships")
            .satisfies(a -> assertThat(a.getCultivatedLand()).as("check cultivatedLand").isEqualTo(expected.getCultivatedLand()))
            .satisfies(a -> assertThat(a.getCrop()).as("check crop").isEqualTo(expected.getCrop()));
    }
}
