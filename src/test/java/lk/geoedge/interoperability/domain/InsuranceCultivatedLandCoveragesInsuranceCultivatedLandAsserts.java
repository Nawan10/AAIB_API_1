package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InsuranceCultivatedLandCoveragesInsuranceCultivatedLandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandAllPropertiesEquals(
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand expected,
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand actual
    ) {
        assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandAutoGeneratedPropertiesEquals(expected, actual);
        assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandAllUpdatablePropertiesEquals(
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand expected,
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand actual
    ) {
        assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandUpdatableFieldsEquals(expected, actual);
        assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandAutoGeneratedPropertiesEquals(
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand expected,
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLandCoveragesInsuranceCultivatedLand auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandUpdatableFieldsEquals(
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand expected,
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand actual
    ) {
        assertThat(actual)
            .as("Verify InsuranceCultivatedLandCoveragesInsuranceCultivatedLand relevant properties")
            .satisfies(a -> assertThat(a.getCropDurationId()).as("check cropDurationId").isEqualTo(expected.getCropDurationId()))
            .satisfies(a -> assertThat(a.getInsurancePoliceId()).as("check insurancePoliceId").isEqualTo(expected.getInsurancePoliceId()))
            .satisfies(a -> assertThat(a.getSumInsuredPerAcre()).as("check sumInsuredPerAcre").isEqualTo(expected.getSumInsuredPerAcre()))
            .satisfies(a -> assertThat(a.getInsuranceExtent()).as("check insuranceExtent").isEqualTo(expected.getInsuranceExtent()))
            .satisfies(a -> assertThat(a.getSumAmount()).as("check sumAmount").isEqualTo(expected.getSumAmount()))
            .satisfies(a -> assertThat(a.getInsuranceStatus()).as("check insuranceStatus").isEqualTo(expected.getInsuranceStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuranceCultivatedLandCoveragesInsuranceCultivatedLandUpdatableRelationshipsEquals(
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand expected,
        InsuranceCultivatedLandCoveragesInsuranceCultivatedLand actual
    ) {
        // empty method
    }
}
