package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DamageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDamageAllPropertiesEquals(Damage expected, Damage actual) {
        assertDamageAutoGeneratedPropertiesEquals(expected, actual);
        assertDamageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDamageAllUpdatablePropertiesEquals(Damage expected, Damage actual) {
        assertDamageUpdatableFieldsEquals(expected, actual);
        assertDamageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDamageAutoGeneratedPropertiesEquals(Damage expected, Damage actual) {
        assertThat(actual)
            .as("Verify Damage auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDamageUpdatableFieldsEquals(Damage expected, Damage actual) {
        assertThat(actual)
            .as("Verify Damage relevant properties")
            .satisfies(a -> assertThat(a.getDamageName()).as("check damageName").isEqualTo(expected.getDamageName()))
            .satisfies(a -> assertThat(a.getDamageCode()).as("check damageCode").isEqualTo(expected.getDamageCode()))
            .satisfies(a -> assertThat(a.getDamageFamily()).as("check damageFamily").isEqualTo(expected.getDamageFamily()))
            .satisfies(a -> assertThat(a.getDamageGenus()).as("check damageGenus").isEqualTo(expected.getDamageGenus()))
            .satisfies(a -> assertThat(a.getDamageSpecies()).as("check damageSpecies").isEqualTo(expected.getDamageSpecies()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDamageUpdatableRelationshipsEquals(Damage expected, Damage actual) {
        assertThat(actual)
            .as("Verify Damage relationships")
            .satisfies(a -> assertThat(a.getDamageCategory()).as("check damageCategory").isEqualTo(expected.getDamageCategory()))
            .satisfies(a -> assertThat(a.getDamageType()).as("check damageType").isEqualTo(expected.getDamageType()));
    }
}
