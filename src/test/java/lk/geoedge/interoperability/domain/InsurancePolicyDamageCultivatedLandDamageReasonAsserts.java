package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InsurancePolicyDamageCultivatedLandDamageReasonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsurancePolicyDamageCultivatedLandDamageReasonAllPropertiesEquals(
        InsurancePolicyDamageCultivatedLandDamageReason expected,
        InsurancePolicyDamageCultivatedLandDamageReason actual
    ) {
        assertInsurancePolicyDamageCultivatedLandDamageReasonAutoGeneratedPropertiesEquals(expected, actual);
        assertInsurancePolicyDamageCultivatedLandDamageReasonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsurancePolicyDamageCultivatedLandDamageReasonAllUpdatablePropertiesEquals(
        InsurancePolicyDamageCultivatedLandDamageReason expected,
        InsurancePolicyDamageCultivatedLandDamageReason actual
    ) {
        assertInsurancePolicyDamageCultivatedLandDamageReasonUpdatableFieldsEquals(expected, actual);
        assertInsurancePolicyDamageCultivatedLandDamageReasonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsurancePolicyDamageCultivatedLandDamageReasonAutoGeneratedPropertiesEquals(
        InsurancePolicyDamageCultivatedLandDamageReason expected,
        InsurancePolicyDamageCultivatedLandDamageReason actual
    ) {
        assertThat(actual)
            .as("Verify InsurancePolicyDamageCultivatedLandDamageReason auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsurancePolicyDamageCultivatedLandDamageReasonUpdatableFieldsEquals(
        InsurancePolicyDamageCultivatedLandDamageReason expected,
        InsurancePolicyDamageCultivatedLandDamageReason actual
    ) {
        assertThat(actual)
            .as("Verify InsurancePolicyDamageCultivatedLandDamageReason relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDamageCategoryId()).as("check damageCategoryId").isEqualTo(expected.getDamageCategoryId()))
            .satisfies(a -> assertThat(a.getDamageTypeId()).as("check damageTypeId").isEqualTo(expected.getDamageTypeId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsurancePolicyDamageCultivatedLandDamageReasonUpdatableRelationshipsEquals(
        InsurancePolicyDamageCultivatedLandDamageReason expected,
        InsurancePolicyDamageCultivatedLandDamageReason actual
    ) {
        // empty method
    }
}
