package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IndexPayoutEventListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndexPayoutEventListAllPropertiesEquals(IndexPayoutEventList expected, IndexPayoutEventList actual) {
        assertIndexPayoutEventListAutoGeneratedPropertiesEquals(expected, actual);
        assertIndexPayoutEventListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndexPayoutEventListAllUpdatablePropertiesEquals(IndexPayoutEventList expected, IndexPayoutEventList actual) {
        assertIndexPayoutEventListUpdatableFieldsEquals(expected, actual);
        assertIndexPayoutEventListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndexPayoutEventListAutoGeneratedPropertiesEquals(IndexPayoutEventList expected, IndexPayoutEventList actual) {
        assertThat(actual)
            .as("Verify IndexPayoutEventList auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndexPayoutEventListUpdatableFieldsEquals(IndexPayoutEventList expected, IndexPayoutEventList actual) {
        assertThat(actual)
            .as("Verify IndexPayoutEventList relevant properties")
            .satisfies(a -> assertThat(a.getIndexPayoutEventId()).as("check indexPayoutEventId").isEqualTo(expected.getIndexPayoutEventId())
            )
            .satisfies(a -> assertThat(a.getAscId()).as("check ascId").isEqualTo(expected.getAscId()))
            .satisfies(a -> assertThat(a.getConfirmedBy()).as("check confirmedBy").isEqualTo(expected.getConfirmedBy()))
            .satisfies(a -> assertThat(a.getCultivatedExtent()).as("check cultivatedExtent").isEqualTo(expected.getCultivatedExtent()))
            .satisfies(a -> assertThat(a.getPayout()).as("check payout").isEqualTo(expected.getPayout()))
            .satisfies(a -> assertThat(a.getConfirmedDate()).as("check confirmedDate").isEqualTo(expected.getConfirmedDate()))
            .satisfies(a -> assertThat(a.getRejectedBy()).as("check rejectedBy").isEqualTo(expected.getRejectedBy()))
            .satisfies(a -> assertThat(a.getRejectedDate()).as("check rejectedDate").isEqualTo(expected.getRejectedDate()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getFinalPayout()).as("check finalPayout").isEqualTo(expected.getFinalPayout()))
            .satisfies(a ->
                assertThat(a.getIndexPayoutEventStatus()).as("check indexPayoutEventStatus").isEqualTo(expected.getIndexPayoutEventStatus())
            )
            .satisfies(a -> assertThat(a.getIsApproved()).as("check isApproved").isEqualTo(expected.getIsApproved()))
            .satisfies(a -> assertThat(a.getMonitoringRange()).as("check monitoringRange").isEqualTo(expected.getMonitoringRange()))
            .satisfies(a -> assertThat(a.getIsInsurance()).as("check isInsurance").isEqualTo(expected.getIsInsurance()))
            .satisfies(a ->
                assertThat(a.getInsuranceCultivatedLand())
                    .as("check insuranceCultivatedLand")
                    .isEqualTo(expected.getInsuranceCultivatedLand())
            )
            .satisfies(a -> assertThat(a.getIndexChequeId()).as("check indexChequeId").isEqualTo(expected.getIndexChequeId()))
            .satisfies(a -> assertThat(a.getIndexProductId()).as("check indexProductId").isEqualTo(expected.getIndexProductId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndexPayoutEventListUpdatableRelationshipsEquals(IndexPayoutEventList expected, IndexPayoutEventList actual) {
        assertThat(actual)
            .as("Verify IndexPayoutEventList relationships")
            .satisfies(a -> assertThat(a.getCultivatedFarmer()).as("check cultivatedFarmer").isEqualTo(expected.getCultivatedFarmer()))
            .satisfies(a -> assertThat(a.getCultivatedLand()).as("check cultivatedLand").isEqualTo(expected.getCultivatedLand()))
            .satisfies(a -> assertThat(a.getSeason()).as("check season").isEqualTo(expected.getSeason()));
    }
}
