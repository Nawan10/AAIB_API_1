package lk.geoedge.interoperability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CultivatedLandDamageReasonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReasonAllPropertiesEquals(
        CultivatedLandDamageReason expected,
        CultivatedLandDamageReason actual
    ) {
        assertCultivatedLandDamageReasonAutoGeneratedPropertiesEquals(expected, actual);
        assertCultivatedLandDamageReasonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReasonAllUpdatablePropertiesEquals(
        CultivatedLandDamageReason expected,
        CultivatedLandDamageReason actual
    ) {
        assertCultivatedLandDamageReasonUpdatableFieldsEquals(expected, actual);
        assertCultivatedLandDamageReasonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReasonAutoGeneratedPropertiesEquals(
        CultivatedLandDamageReason expected,
        CultivatedLandDamageReason actual
    ) {
        assertThat(actual)
            .as("Verify CultivatedLandDamageReason auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReasonUpdatableFieldsEquals(
        CultivatedLandDamageReason expected,
        CultivatedLandDamageReason actual
    ) {
        assertThat(actual)
            .as("Verify CultivatedLandDamageReason relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCultivatedLandDamageReasonUpdatableRelationshipsEquals(
        CultivatedLandDamageReason expected,
        CultivatedLandDamageReason actual
    ) {
        assertThat(actual)
            .as("Verify CultivatedLandDamageReason relationships")
            .satisfies(a -> assertThat(a.getDamageCategory()).as("check damageCategory").isEqualTo(expected.getDamageCategory()))
            .satisfies(a -> assertThat(a.getDamageType()).as("check damageType").isEqualTo(expected.getDamageType()));
    }
}
